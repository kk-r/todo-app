# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI Flow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm run test:unit
    - run: npm run test:pact
    - name: Run Pact Publish
      if: github.event_name == 'push'
      run: npm run pact:publish
      env:
        broker_url: ${{ secrets.PACT_BROKER_URL }}
        broker_token: ${{ secrets.PACT_BROKER_TOKEN }}
  build-staging:
    if: github.event_name == 'push'
    needs: build
    name: Build Staging Image for E2e Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@main

      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Tag Name
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_NAME }}/${{ secrets.IMG_REPO }}:${{ steps.vars.outputs.branch }}.${{ steps.vars.outputs.sha_short }}.staging
        env:
          VUE_APP_API_BASE_URL: /
          VUE_APP_NODE_ENV: production
      - name: Update staging deployment file
        run: TAG=${{ steps.vars.outputs.branch }}.${{ steps.vars.outputs.sha_short }}.staging && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/${{ secrets.IMG_REPO }}:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment-staging.yaml


      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
   
      - name: Deploy to DigitalOcean Kubernetes (Staging)
        run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment-staging.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/frontend-staging --namespace=staging
  cypress-run:
    if: github.event_name == 'push'
    needs: build-staging
    name: E2e Tests run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          config: pageLoadTimeout=100000,baseUrl=${{ secrets.STAGING_API_URL }}
          record: true
          env: VUE_APP_API_BASE_URL=${{ secrets.STAGING_API_URL }}
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # pass the project ID from the secrets through environment variable
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}
          CYPRESS_VUE_APP_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
  build-final-image:
    name: Build Image for production release
    needs: cypress-run
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout master
        uses: actions/checkout@main

      # Install doctl.
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Tag Name
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.REGISTRY_NAME }}/${{ secrets.IMG_REPO }}:${{ steps.vars.outputs.branch }}.${{ steps.vars.outputs.sha_short }}
        env:
          VUE_APP_API_BASE_URL: /
          VUE_APP_NODE_ENV: production
      # Deploy to DigitalOCcean Kubernetes.
      - name: Update prod deployment file
        run: TAG=${{ steps.vars.outputs.branch }}.${{ steps.vars.outputs.sha_short }} && sed -i 's|<IMAGE>|${{ secrets.REGISTRY_NAME }}/${{ secrets.IMG_REPO }}:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yaml
      

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.CLUSTER_NAME }}
      
      # If you haven't already integrated with your registry and only want workloads in a particular namespace to be able to pull 
      # from your registry, uncomment the next two commands.
      #- name: Upload credentials of your registry to your DigitalOcean Kubernetes cluster
      #  run: doctl registry kubernetes-manifest | kubectl apply -f -
        
      #- name: Reference the secret you just uploaded as an imagePullSecrets
      #  run: "kubectl patch serviceaccount default -p '{\"imagePullSecrets\": [{\"name\": \"registry-<your-registry-name>`\"}]}'"
        
      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yaml
      
      - name: Deploy Ingress
        run: kubectl apply -f $GITHUB_WORKSPACE/config/ingress.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/frontend

